

1. 
  creacion proyecto > 
C:\Users\jesus\Desktop\JESUS\EXPRESS_PROYECTOS\1_crud_rest_limpia\backend_1>npm init
This utility will walk you through creating a package.json file.
It only covers the most common items, and tries to guess sensible defaults.

See `npm help init` for definitive documentation on these fields
and exactly what they do.

Use `npm install <pkg>` afterwards to install a package and
save it as a dependency in the package.json file.

Press ^C at any time to quit.(presionar enter)
package name: (backend_1)  --- nombre proyecto
version: (1.0.0)           --- version
description: rest api crud y login 
entry point: (index.js)   --- file principal
test command: test
git repository:
keywords:
author: jesus HA
license: (ISC)
About to write to C:\Users\jesus\Desktop\JESUS\EXPRESS_PROYECTOS\1_crud_rest_limpia\backend_1\package.json:

{
  "name": "backend_1",
  "version": "1.0.0",
  "description": "rest api crud y login ",
  "main": "index.js",
  "scripts": {
    "test": "test"
  },
  "author": "jesus HA",
  "license": "ISC"
}

Is this OK? (yes)  ---- presionar enter




2. 

instalando dependencias 
  
C:\Users\jesus\Desktop\JESUS\EXPRESS_PROYECTOS\1_crud_rest_limpia\backend_1>npm install -g typescritp

added 1 package in 2s

C:\Users\jesus\Desktop\JESUS\EXPRESS_PROYECTOS\1_crud_rest_limpia\backend_1>tsc --version
Version 5.1.6



3.
  >
     crea un file principal del back
      app.ts

   > en el package.json 
   {
  "name": "backend_1",
  "version": "1.0.0",
  "description": "rest api crud y login ",
  "main": "app.ts",  --- cambiar esto
  "scripts": {
    "test": "test"
  },
  "author": "jesus HA",
  "license": "ISC"
}
   


 4. 
  
  creandi un file de configuracion de .ts para la transpilacion
  el .ts ayuda a mejorar los error es un js repotenciado para el uso de poo , 

 C:\Users\jesus\Desktop\JESUS\EXPRESS_PROYECTOS\1_crud_rest_limpia\backend_1>tsc --init 

Created a new tsconfig.json with:

  tsconfig.ts (file) ---dirigite al file( al lado derecho esta su descripcion de uso)
       
    /* Type Checking */
    "strict": true,---- esto es para mejorar el codigo limpio       
    "target": "es2016", ----- esto es para usar el ecmasript de js   
    "outDir": "./dist",      ----- busca esto y decomentalo modficialo igual como este 
                                   es para guarda el transpilado de .ts a .js

    "sourceMap": true, ------ para manejadore de js      
    "moduleResolution": "node10",  --- descomenta esto                             


  

  5.
    ejecuta el comando crea el folder > dist
   
     C:\Users\jesus\Desktop\JESUS\EXPRESS_PROYECTOS\1_crud_rest_limpia\backend_1>tsc
                                               


6. creacion de la estructura file y folders
  
  > src (donde se trabaja) 
     > controllers (logica de los metodos rest)
        > login.controller.ts
        > user.controller.ts
        > db.validators.ts
     > database  (conexion de la bd)
         > config.ts (conexion a bd)
     > helpers (diferentes files pa autenticar y validar el codigo)
         jwtts --- validar token
         db.validators.ts
     > midlewaleres 
        validateField.ts
        validateJWT.ts
     > models (clases guias) 
       > server.models.ts --- principal logica del servidor
       >login.model.ts
       > product.model.ts
     >routes (para routear los rest)
       login.router.ts
       user.routes.ts
       product.routes.ts
    >label.ts (file para mostrar mensajes al usuario)
  > app.ts   ---ejecuta todo
  >.env    --- variables de entorno verdadera
  >.env.example --- variables de entorno ejemplo de arriba esta se sube al git



7. 
  variables de entorno 
   .env valores para personalizar el Comportamiento de un api rest


8. 

   instalando dependencias >

C:\Users\jesus\Desktop\JESUS\EXPRESS_PROYECTOS\1_crud_rest_limpia\backend_1>npm i express

C:\Users\jesus\Desktop\JESUS\EXPRESS_PROYECTOS\1_crud_rest_limpia\backend_1>npm i --save-dev @types/express

--- variable de entorno
  > npm i dotenv 



mapear los cambios ============
  C:\Users\jesus\Desktop\JESUS\EXPRESS_PROYECTOS\1_crud_rest_limpia\backend_1>npm install nodemon

usar proyecto de nodejs con mongodb==========
  PS C:\Users\jesus\Desktop\JESUS\EXPRESS_PROYECTOS\1_crud_rest_limpia\backend_1> npm i mongoose

usar .ts con mongoose===========
PS C:\Users\jesus\Desktop\JESUS\EXPRESS_PROYECTOS\1_crud_rest_limpia\backend_1> npm i @typegoose/typegoose

pa encriptar contrase単as===========
PS C:\Users\jesus\Desktop\JESUS\EXPRESS_PROYECTOS\1_crud_rest_limpia\backend_1> npm i bcryptjs
mezcla de .ts con bcrypt
PS C:\Users\jesus\Desktop\JESUS\EXPRESS_PROYECTOS\1_crud_rest_limpia\backend_1> npm i --save-dev @types/bcryptjs

para usar el token===========
PS C:\Users\jesus\Desktop\JESUS\EXPRESS_PROYECTOS\1_crud_rest_limpia\backend_1> npm i jsonwebtoken

PS C:\Users\jesus\Desktop\JESUS\EXPRESS_PROYECTOS\1_crud_rest_limpia\backend_1> npm i --save-dev @types/jsonwebtoken 



validaciones===========================

PS C:\Users\jesus\Desktop\JESUS\EXPRESS_PROYECTOS\1_crud_rest_limpia\backend_1> npm i express-validator


para los cors o nucleos 
\Users\jesus\Desktop\JESUS\EXPRESS_PROYECTOS\1_crud_rest_limpia\backend_1> npm install cors 

PS C:\Users\jesus\Desktop\JESUS\EXPRESS_PROYECTOS\1_crud_rest_limpia\backend_1> npm i --save-dev @types/cors




9. 
  > comandos personalizados
  package.json >
    "scripts": {
    "test": "test",
    "tsc": "tsc --watch",  --- agregar esto pasa todo el .ts al .js
    "start:dev:local": "nodemon ./dist/app.js" --- agregar esto nodemon solo lee .js
  },

   PARA LEVANTAR PONER ESTOS COMANDOS SIEMPRE DE MANERA LOCAL
   ejecutar en terminales diferentes(cmd o poweshell) 1 el .ts y luego el nodemon
  > npm run tsc  ---ejecuta pa tranpilar el .ts al .js
     si sale error (debes como comando no encontrado debes instalar .ts)
  > npm run start:dev:local --- ejecuta con el nodemon , auto los cambios



10.  BASE DE DATOS NOSQL
 > abre mongodb
    icono mas > crea una bd
    database : xtechnology
    collection : 
                 login   ---- son las tablas(crea esta tabla)
                 logins  --- al registrar creara esta tabla(lo creara en plural auto) solo se creara 1 vez ,
                            si quieres puedes eliminar el login tabla la 1 tabla
                 product  -----  crea la tabla si es nesecario      
                        
> cualquier consulta del ORM usado aqui en este proyecto osea consultas de mongo 
ver la documentacion: https://www.mongodb.com/docs/manual/reference/operator/query/lte/


12. 
  > autenticacion : verificar la identidad de un usuario o de una app 
    que ingrese
  
  > authorization : cuando el usuario se logea solo tendra permisos en ciertas cosas o
                   componentes     

  > hash y encriptacion de datos : la contrase単a no lo guarda igual si no lo almacena de diferente forma en la bd  agregandole seguridad. se usa la libreria bscrypt esto es para proteger las contrase単as.  esto defiendo ataques de fuerza bruta y de dicccionario.              

  > token : cuando pide solicitud en vez de enviar usuario y contrase単a , usaremos el jsonwebtoken , cuando un usuario se logea obtiene un token unico para ese usuario , luego en el head en cada solicitud le enviara eso el server lo verificara y luego le dara el pase. el token dura poco. 



  13. 
    
    Postman : nos ayuda simular peticiones http
    peticiones si tener frontend , 
    la url , el tipo de metodo(put etc) , head().etc
    reponse : la respuesta del servidor
    postamn no ayuda a funcionar conjuntamente con api rest. desde api simples hasta api complejas
    
    Postman_estructura.png > imagen de la estructura del postman

    codigos de estado HTTP + conocidos:
      200 > : correcto todo OK
      400 > : error de tu frontend
      500 > : error del servidor 


    enviando parametros desde postamn :
     ejemplo : http://localhost:3000/api/users/create?id=u3u828i2i92  --- el id es un parametro 
     o tambien abre postam > params > el key es el parametro y el value es el valor 
      






   14. 
      probando errrores y verificando q existan , osea que las validaciones o midlewaleres funcionen
        
        1. put > 
        
        1.1 http://localhost:3000/api/products/update/1
         { 
    "name":"keyboard",
    "description":"teclado",
    "price":7.4,
    "quantity":5,       
    "status":"new"
       } 
      response :
         {
    "msg": "Campo Requerido",
    "errors": {
        "errors": [
            {
                "type": "field",
                "value": "1",
                "msg": "No es un ID valido",
                "path": "id",
                "location": "params"
            },
            {
                "type": "field",
                "value": "1",
                "msg": "el servidor fallo ",
                "path": "id",
                "location": "params"
            }
        ]
    }
}


 respuesta el id no es de mongodb 


 1.2  http://localhost:3000/api/products/update/66e8eec8834924a9f3e815a2(idnoesvalido)
 { 
    "name":"keyboard",
    "description":"teclado",
    "price":7.4,
    "quantity":5,       
    "status":"new"
} 
{
    "msg": "Campo Requerido",
    "errors": {
        "errors": [
            {
                "type": "field",
                "value": "66e8eec8834924a9f3e815a2",
                "msg": "el servidor fallo ",
                "path": "id",
                "location": "params"
            }
        ]
    }
}

pq el id no es valido verificar tambien en la consola del vscode



2. DELETE
  2.1 
    http://localhost:3000/api/products/delete/1 
    {
    "msg": "Campo Requerido",
    "errors": {
        "errors": [
            {
                "type": "field",
                "value": "1",
                "msg": "No es un ID valido",
                "path": "id",
                "location": "params"
            },
            {
                "type": "field",
                "value": "1",
                "msg": "el servidor fallo ",
                "path": "id",
                "location": "params"
            }
        ]
    }
}

pq el id no es de mongodb

2.2 
 http://localhost:3000/api/products/delete/66e8eec8834924a9f3e815a6
 {
    "msg": "Campo Requerido",
    "errors": {
        "errors": [
            {
                "type": "field",
                "value": "66e8eec8834924a9f3e815a6",
                "msg": "el servidor fallo ",
                "path": "id",
                "location": "params"
            }
        ]
    }
}
el id es valido pero no existe 








15. Cors 
   creado por los navegadores web para compartir diferentes datos entre diferentes origenes , el navegador permite o bloquea 
   solicitudes entre diferentes dominios.
   si no se configuran los head se puede bloquear
   al configurar nuestra api permitimos que diferentes dominios realizen peticiones a la api de manera segura
   los cors son importantes
   en pocas palabras es un mecanismo de seguridad fue implementando por los navegadores web para controlar las solicitudes 
   diferentes dominios , puede afectar en la manera como interactuamos con la api rest.
   debes configurar los cors correctamente desde el backend



16. 
 MONGODB ATLAS
  servicios de bd de mongodb en la nube , es nosql. guarda en formato json. es escalable y flexible.
  con mongodbatlas no nesecitas configurar nada.solo te centras en tu aplicacion. es escalable manejar 
  grandes volumenes de datos. como esta en la nube no hay perdidas de datos. puede monitorear y configurar las
  copias de seguridad.
  La base de datos como servicio (DBaaS) es un servicio que le permite configurar, implementar y escalar una base de datos sin preocuparse por el hardware f鱈sico local, las actualizaciones de software y los detalles de configuraci坦n para el rendimiento. Con DBaaS, un proveedor de nube hace todo eso por usted y lo pone en funcionamiento de inmediato.

    > ver la configuracion
         > MongodbAtlas.txt

    > https://www.c-sharpcorner.com/article/how-to-create-an-mongodb-atlas-account/ --- pasos 
        ingresar mi cuenta    

    > Deploy your cluster
         > M2  --- es gratis
         > name    --recordar y PONER 
            ejemplo : jesus
         > todo x defecto
         > regios > south america
         > luego aparecera un modal recordar esos datos del clouster
             contrase単a y password



17. 
   USANDO GIT

  git : herriamienta de control de versiones  , ademas herramienta donde los desarolladores  instalan localmente para 
  gestionar el codigo fuente

  gitbush : basada en la nube , los desarolladores utilizan git para poder conectarse y cargar o descargar recursos. 

 MANERA BASICA========================
 Este proyecto ya fue creado con git de manera simple osea a mi manera
 en el .gitignore se pone esto bueno puse esto

    /node_modules   --- los modulos pesan mucho se debe omitir
    dist/          --- bueno en este caso lo omiti


MANERA PROFESIONAL===============================
  > Esto seria la forma de crear un repositorio de manera profesional
  1.

  creando repositorio en github :
    > entra a github 
    > crea tu repositorio
    > nombre y descripcion 
    > private
    >a単ade readme
    >a単ade gitignore
    >licence > elige gnu general public licence v3
    > create repository
    > saldra tu repositorio ya creado en tu github pero sin codigo nada


 2. busca en google > git client
   https://git-scm.com/downloads/guis   
   > downloads y descargar para windows es basicamente git
   > gui clients tambien puedes descargarlo es el github para escritorio

  3. crea un folder en tu pc y clona la ruta del paso 1 , osea la repo vacia que tienes  
    > dirigite a tu folder de tu back q tiene todo el codigo 
       copia todo menos el node_modules
    > dirigite a tu folder clonado con el repo vacio o el creado en el paso 1 y pegalo
    > ahora el folder clonado del paso 1 tiene todo el codigo del proyecto general del back
      usa el git add , git commit y git push y listo ya esta en tu repo remoto 

  4.
     abre el folder en vscode del folder clonado con tu codigo pegado 
     > pon para instalar dependencias
      npm i 
  
  5. 
     ahora configuraremos el .gitignore pa omitir files q se suban al repo remoto
    pondremos en este file

    /node_modules   --- los modulos pesan mucho se debe omitir
    .env            --- tiene data sensible no debe subirse , pa eso esta .env.example eso si sube
    
    > luego poner git add y git commit y git push.

    6. 
      ojo : si la carpeta ya fue pusheada y esta en tu repo remoto debera poner esto en la terminal 
      ya fue agregada previamente al repositorio (es decir, ya fue versionada), tendr叩s que eliminarla del control de versiones, aunque siga existiendo localmente. Puedes hacerlo con el siguiente comando:
      ademas ponerlo dentro del .gitignore tambien

        git rm -r --cached .env    --- para un file
        git rm -r --cached dist  --- para una carpeta



18.
  DEPLOY PRODUCCION 
  subiendo el proyecto a un servidor 

  > en el package.json 
     "scripts": {
    "test": "test",
    "tsc": "tsc --watch",
    "build": "tsc",   ---- agregagremos esto tambien pa ejecutar en la pagina de render
    "start:dev:local": "nodemon ./dist/app.js",
    "start:prod":"node ./dist/app.js"  -------- agregar esto , en produccion ya no habra cambios x eso ya no se usa el nodemon
                                              solo se ejecuta 1 vez
  }, 


  > ejecutar x ultima vez 
      npm run tsc 

  > ejecuta el comando para el produccion 
     npm run start:prod    

  > poner git add , commit y push recordar

  > entra a esa pagina , y debes loguearte  
   https://dashboard.render.com/

     > dentro de la pagina
     dashboard >  web services >new web services
     >git provide > github 
        > authurozi render en el modal q aparece
        > el modal install render 
            > selecciona solo el only select repositories
            > en el combo select repositories busca tu repositorio
        > poner install    y pon tu contrase単as
        > git provider elige tu repo  y pon connect
     
     > aparece una nueva pagina 
       Configure and deploy your new Web Service 
          > source code : aparece tu repo
          > name : poner nombre 
          >languaje : poner node ---depende de tu proyecto 
          > branch : segun git en este caso es master 
          > Root Directory : src      ---- donde esta la fuente
          >Build Command :  npm install && npm run build      ----- pa instalar depend y transpilar al .ts
                                                                 ponemos esto pq el folder dist no esta en el github
                            https://docs.render.com/configure-environment-variables#adding-in-bulk-from-a-env-file(documentacion)
          >Start Command :  npm run start:prod    ----- comando inicia en produccion
          > For hobby projects
              plan free (el primero)
          > Environment Variables
             poner las variables de entorno de tu .env 
             puedes hacerlo manualmente o importar el file    

     > deply web service        
     > espera en un momento
     > ==> Your service is live  : todo esta listo se deployo tu proyecto 
     >  web service 
      .
       .
       https://mater-crud-api-rest-buenas-practicas.onrender.com  --- esto sera el dominio de tu back
        con esta ruta podra probar en el postman y en el front , la ruta loca o el puerto funcionara igual

    > en la misma pagina aparecera una terminal en esa terminal sera la terminal de tu proyecto pero en 
    el servidor podras ver los errores   

    > https://mater-crud-api-rest-buenas-practicas.onrender.com 
       con eso ya puedes probar tus endpoints solo lo juntas en la parte final 


   > ruta de los enpoints 
   EnpointsPro.txt


   19. 

    README
        ---- documentacion agregando esto genera un readme con estilo 
           para la documentacion de proyecto de github 
        https://readme.so/es --- pagina
        > selecciona empieza ahora     
        > selecciona > title and descripciont > el resto eliminalo en seccciones 
        > puedes agregarlo con el  + custom select 
          
          ## master api con express y mongodb 
         el proyecto de API se utiliza un control de productos y usuarios mediante una base de datos

          ---poner una estructura parecida a esta puedes poner poner iconos averiguar mas

        > al final copia todo ese codigo 
        > en tu proyecto README.md > copia eso 